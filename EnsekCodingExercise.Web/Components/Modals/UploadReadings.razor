@using EnsekCodingExercise.Web.Clients
@using EnsekCodingExercise.Web.Models
@inject ReadingsApiClient readingsApiClient

<EditForm Model="@uploadModel" OnValidSubmit="HandleFileUpload">
    <DataAnnotationsValidator />
    <div class="form-group row mb-3">
        <label class="col-md-4 col-form-label">Select File:</label>
        <div class="col-md-6">
            <InputFile OnChange="OnInputFileChange" />
        </div>
    </div>
    <div class="row">
        <div class="col-md-12 text-right">
            @if (uploadResults == null)
            {
                <Button Type="ButtonType.Submit" Color="ButtonColor.Success" Class="float-end me-2">Upload</Button>
            }
        </div>
    </div>
</EditForm>

@if (uploadResults != null)
{
    <div class="mt-3">
        <h4>Upload Results</h4>
        <div class="form-group row mb-3">
            <label class="col-md-4 col-form-label">Successful Uploads:</label>
            <label class="col-md-6 col-form-label">@uploadResults.Successful</label>
        </div>
        <div class="form-group row mb-3">
            <label class="col-md-4 col-form-label">Failed Uploads:</label>
            <label class="col-md-6 col-form-label">@uploadResults.Failed</label>
        </div>
        <div class="form-group row mb-3">
            <label class="col-md-4 col-form-label">Total Records:</label>
            <label class="col-md-6 col-form-label">@uploadResults.TotalRecords</label>
        </div>
    </div>
    <div class="row mt-3">
        <div class="col-md-12 text-right">
            <Button Type="ButtonType.Button" Color="ButtonColor.Secondary" Class="float-end me-2" @onclick="CloseModal">Close</Button>
        </div>
    </div>
}

@code {
    [Parameter] public EventCallback<MouseEventArgs> OnClickCallback { get; set; }
    private IBrowserFile? selectedFile;
    private UploadResults? uploadResults;
    private readonly UploadModel uploadModel = new();

    private void OnInputFileChange(InputFileChangeEventArgs e)
    {
        selectedFile = e.File;
    }

    private async Task HandleFileUpload()
    {
        if (selectedFile != null)
        {
            uploadResults = await readingsApiClient.MeterReadingUploadAsync(selectedFile);
        }
    }

    private async Task CloseModal()
    {
        uploadResults = null;
        await OnClickCallback.InvokeAsync();
    }

    private class UploadModel
    {
        // This class can be expanded if needed for additional form data. Just using it as something to attach to the EditForm for now.
    }
}
